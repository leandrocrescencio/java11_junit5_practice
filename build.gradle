
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

plugins {
	id "io.qameta.allure" version "2.7.0"  // Latest Plugin Version
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'java-gradle-plugin'
    id "org.sonarqube" version "2.7"
}


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
    
    testImplementation('io.qameta.allure:allure-selenide:2.7.0')
    testRuntimeOnly('io.qameta.allure:allure-junit5:2.7.0')
         
    implementation(
    	'org.apache.logging.log4j:log4j-core:2.11.0',
    	'org.apache.logging.log4j:log4j-api:2.11.0'
    )
    
    implementation('io.qameta.allure:allure-okhttp3:2.7.0')
    
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.4.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.4.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.4.0'
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.1.1'
       
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile 'io.rest-assured:rest-assured:3.3.0'
    compile 'io.rest-assured:json-path:3.3.0'
    compile 'io.rest-assured:xml-path:3.3.0'
    testCompile 'io.rest-assured:json-schema-validator:3.3.0'
    
    
	compile group: 'io.qameta.allure', name: 'allure-selenide', version: '2.0-BETA22'   
	compile 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    compile 'org.junit.jupiter:junit-jupiter-params:5.4.0'
   
	
    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.4.0',
            'org.junit.vintage:junit-vintage-engine:5.4.0',
            'org.junit.platform:junit-platform-launcher:1.1.0',
            'org.junit.platform:junit-platform-runner:1.1.0'
    )
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
}

apply plugin: "io.qameta.allure"
apply plugin: 'org.sonarqube'

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}


sonarqube {
    properties {
        property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
        property "sonar.exclusions", "**/*Generated.java"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

eclipse {
  classpath {
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    downloadJavadoc = true
  }
}

allure {
    autoconfigure = true
    version = '2.7.0'  // Latest Allure Version
    useJUnit5 {
        version = '2.7.0' // Latest Allure Version
    }

}


test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
    
     afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

